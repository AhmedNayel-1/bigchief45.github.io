<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gnocchi on Andrés Álvarez</title>
    <link>https://aalvarez.me/tags/gnocchi/</link>
    <description>Recent content in Gnocchi on Andrés Álvarez</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Jun 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://aalvarez.me/tags/gnocchi/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python Functional HTTP Testing With Gabbi</title>
      <link>https://aalvarez.me/posts/python-functional-http-testing-with-gabbi/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://aalvarez.me/posts/python-functional-http-testing-with-gabbi/</guid>
      <description>&lt;p&gt;Continuing with my journey in contributing to &lt;a href=&#34;http://gnocchi.xyz/index.html&#34;&gt;Gnocchi&lt;/a&gt;, I have learned of an excellent tool which Gnocchi uses to test its API from a HTTP request approach. The tool is called &lt;a href=&#34;https://github.com/cdent/gabbi&#34;&gt;&lt;strong&gt;Gabbi&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Coming from a Ruby, Rails, and Rspec background, I was very pleased on learning how Gabbi works and how to use it. Gabbi uses YAML to construct the tests that will hit the API endpoints, in a similar way to using Rspec&amp;rsquo;s DSL when making &lt;a href=&#34;https://github.com/rspec/rspec-rails#request-specs&#34;&gt;request specs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For my latest contribution to Gnocchi, I was working on an &lt;a href=&#34;https://github.com/gnocchixyz/gnocchi/issues/12&#34;&gt;issue&lt;/a&gt; where newly created metrics were not being returned in the response from &lt;code&gt;/v1/resource/generic/:id/metric&lt;/code&gt;. After applying the fixes and submitting the patch, it was also necessary to update some of the functional Gabbi tests that belong to this specific use case.&lt;/p&gt;

&lt;p&gt;One of these original tests is shown below:&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Understanding Gnocchi Measures</title>
      <link>https://aalvarez.me/posts/understanding-gnocchi-measures/</link>
      <pubDate>Wed, 24 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://aalvarez.me/posts/understanding-gnocchi-measures/</guid>
      <description>&lt;p&gt;Measures are simple objects that represent the timeseries data. They simply contain a &lt;strong&gt;timestamp&lt;/strong&gt; and a &lt;strong&gt;value&lt;/strong&gt;, and they belong to &lt;a href=&#34;https://aalvarez.me/posts/understanding-gnocchi-metrics.html&#34;&gt;metrics&lt;/a&gt;. You could say that a measure &lt;em&gt;has many&lt;/em&gt; metrics.&lt;/p&gt;

&lt;h2 id=&#34;adding-measures-to-a-metric&#34;&gt;Adding Measures to a Metric&lt;/h2&gt;

&lt;p&gt;Using the REST API, we can easily add measures to a metric:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-http&#34; data-lang=&#34;http&#34;&gt;&lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;POST&lt;/span&gt; &lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;/v1/metric/511b61a1-8d67-42d5-8add-66d4209a0469/measures&lt;/span&gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;HTTP&lt;/span&gt;&lt;span style=&#34;color:#333&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color:#60e;font-weight:bold&#34;&gt;1.1&lt;/span&gt;
Content-Type&lt;span style=&#34;color:#333&#34;&gt;:&lt;/span&gt; application/json
Content-Length&lt;span style=&#34;color:#333&#34;&gt;:&lt;/span&gt; 198

[
  {
    &lt;span style=&#34;color:#070&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#34;2014-10-06T14:33:57&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#070&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#60e;font-weight:bold&#34;&gt;43.1&lt;/span&gt;
  },
  {
    &lt;span style=&#34;color:#070&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#34;2014-10-06T14:34:12&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#070&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;12&lt;/span&gt;
  },
  {
    &lt;span style=&#34;color:#070&#34;&gt;&amp;#34;timestamp&amp;#34;&lt;/span&gt;: &lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#34;2014-10-06T14:34:20&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#070&#34;&gt;&amp;#34;value&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#00d;font-weight:bold&#34;&gt;2&lt;/span&gt;
  }
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Understanding Gnocchi Metrics</title>
      <link>https://aalvarez.me/posts/understanding-gnocchi-metrics/</link>
      <pubDate>Thu, 18 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://aalvarez.me/posts/understanding-gnocchi-metrics/</guid>
      <description>&lt;p&gt;Metrics are one of the main object types in Gnocchi. They are identified by a UUID and they can also be attached to a resource by using a resource name. Metrics store &lt;strong&gt;measures&lt;/strong&gt;, and the way they do this is defined by &lt;strong&gt;archive policies&lt;/strong&gt;. These are concepts that I will cover in future articles.&lt;/p&gt;

&lt;p&gt;Basically, a metric designates any thing that can be measured: the CPU usage of a server, the temperature of a room or the number of bytes sent by a network interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://gnocchi.xyz/_images/architecture.png&#34; alt=&#34;Gnocchi Architecture&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In the Gnocchi architecture, the &lt;strong&gt;storage&lt;/strong&gt; back-end is responsible for storing measures of created metrics. It receives timestamps and values, and pre-computes aggregations according to the defined archive policies.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Diving Into OpenStack Gnocchi</title>
      <link>https://aalvarez.me/posts/diving-into-openstack-gnocchi/</link>
      <pubDate>Tue, 25 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://aalvarez.me/posts/diving-into-openstack-gnocchi/</guid>
      <description>&lt;p&gt;Gnocchi is a multi-tenant timeseries, metrics and resources database. It provides an HTTP REST interface to create and manipulate the data. It is designed to store metrics at a very large scale while providing access to metrics and resources information and history.&lt;/p&gt;

&lt;p&gt;It is the preferred storage method for metrics in Ceilometer, as of OpenStack Ocata.&lt;/p&gt;

&lt;p&gt;In this post I want to dive into Gnocchi specifics such as its configuration, supported backends, APIs, daemons, and source code.&lt;/p&gt;

&lt;h2 id=&#34;configuration&#34;&gt;Configuration&lt;/h2&gt;

&lt;p&gt;Gnocchi&amp;rsquo;s configuration is stored in a file called &lt;code&gt;gnocchi.conf&lt;/code&gt;. Ideally, this file would be in &lt;code&gt;~/gnocchi.conf&lt;/code&gt; or &lt;code&gt;/etc/gnocchi/gnocchi.conf&lt;/code&gt;. Let&amp;rsquo;s take a look at a basic Gnocchi configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-ini&#34; data-lang=&#34;ini&#34;&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;[DEFAULT]&lt;/span&gt;
&lt;span style=&#34;color:#00c&#34;&gt;debug&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#00c&#34;&gt;verbose&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;true&lt;/span&gt;

&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;[api]&lt;/span&gt;
&lt;span style=&#34;color:#00c&#34;&gt;workers&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;1&lt;/span&gt;

&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;[database]&lt;/span&gt;
&lt;span style=&#34;color:#00c&#34;&gt;backend&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;sqlalchemy&lt;/span&gt;

&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;[indexer]&lt;/span&gt;
&lt;span style=&#34;color:#00c&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;postgresql://gnocchi:gnocchi@127.0.0.1/gnocchi&lt;/span&gt;

&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;[storage]&lt;/span&gt;
&lt;span style=&#34;color:#00c&#34;&gt;coordination_url&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;file:///home/ubuntu/gn/locks&lt;/span&gt;
&lt;span style=&#34;color:#00c&#34;&gt;driver&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;file&lt;/span&gt;
&lt;span style=&#34;color:#00c&#34;&gt;file_basepath&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;/home/ubuntu/gn&lt;/span&gt;

&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;[cors]&lt;/span&gt;
&lt;span style=&#34;color:#00c&#34;&gt;allowed_origin&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#00c&#34;&gt;allow_credentials&lt;/span&gt; &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;background-color:#fff0f0&#34;&gt;false&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The configuration above sets up Gnocchi to use Postgresql as the indexer, and use the file system for storage. Additionally it sets up CORS so that requests from any origin are allowed. You will want to configure CORS in a more secure manner when deploying to a production environment.&lt;/p&gt;

&lt;h3 id=&#34;database-setup&#34;&gt;Database Setup&lt;/h3&gt;

&lt;p&gt;For this example, we are going to use &lt;a href=&#34;www.c9.io&#34;&gt;Cloud 9&lt;/a&gt; as our environment, and Postgresql as the database. This means that we need to first setup the database before we start using Gnocchi.&lt;/p&gt;

&lt;p&gt;Make sure the Postgresql service is running:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo service postgresql start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can enter the Postgresql command line using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo sudo -u postgres psql
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s create a new Postgresql user:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE USER gnocchi SUPERUSER PASSWORD &#39;gnocchi&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then create the database:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CREATE DATABASE gnocchi WITH TEMPLATE = template0 ENCODING = &#39;UNICODE&#39;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the database is finally set up correctly and the configuration file is in place, we can initialize the indexer and storage:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gnocchi-upgrade
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see the following output logs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;2017-05-17 05:28:50.917 3895 INFO gnocchi.cli [-] Upgrading indexer &amp;lt;gnocchi.indexer.sqlalchemy.SQLAlchemyIndexer object at 0x7ff76cff6190&amp;gt;
2017-05-17 05:28:50.982 3895 INFO alembic.runtime.migration [-] Context impl PostgresqlImpl.
2017-05-17 05:28:50.982 3895 INFO alembic.runtime.migration [-] Will assume transactional DDL.
2017-05-17 05:28:51.011 3895 INFO alembic.runtime.migration [-] Context impl PostgresqlImpl.
2017-05-17 05:28:51.011 3895 INFO alembic.runtime.migration [-] Will assume transactional DDL.
2017-05-17 05:28:51.154 3895 INFO gnocchi.cli [-] Upgrading storage &amp;lt;gnocchi.storage.file.FileStorage object at 0x7ff7688f9710&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gnocchi-rest-api&#34;&gt;Gnocchi REST API&lt;/h2&gt;

&lt;p&gt;Gnocchi&amp;rsquo;s REST API is based on &lt;a href=&#34;http://www.pecanpy.org/index.html&#34;&gt;Pecan&lt;/a&gt;, a very lightweight Python web framework that provides object-dispatch style routing. We can confirm this in Gnocchi&amp;rsquo;s &lt;code&gt;rest/__init__.py&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;pecan&lt;/span&gt;
&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0e84b5;font-weight:bold&#34;&gt;pecan&lt;/span&gt; &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;import&lt;/span&gt; rest&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;metrics&#34;&gt;Metrics&lt;/h3&gt;

&lt;p&gt;Gnocchi provides an object type that is called metric. A metric designates any thing that can be measured: the CPU usage of a server, the temperature of a room or the number of bytes sent by a network interface.&lt;/p&gt;

&lt;p&gt;A metric only has a few properties: a UUID to identify it, a name, the archive policy that will be used to store and aggregate the measures.&lt;/p&gt;

&lt;p&gt;Farther down the code in &lt;code&gt;rest/__init__.py&lt;/code&gt;, we can find a metric controller which inherits from a Pecan REST controller:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#b06;font-weight:bold&#34;&gt;MetricController&lt;/span&gt;(rest&lt;span style=&#34;color:#333&#34;&gt;.&lt;/span&gt;RestController):
    _custom_actions &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; {
        &lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#39;measures&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;, &lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;]
    }

    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;def&lt;/span&gt; __init__(self, metric):
        self&lt;span style=&#34;color:#333&#34;&gt;.&lt;/span&gt;metric &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; metric
        mgr &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; extension&lt;span style=&#34;color:#333&#34;&gt;.&lt;/span&gt;ExtensionManager(namespace&lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#39;gnocchi.aggregates&amp;#39;&lt;/span&gt;,
                                         invoke_on_load&lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt;True)
        self&lt;span style=&#34;color:#333&#34;&gt;.&lt;/span&gt;custom_agg &lt;span style=&#34;color:#333&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#007020&#34;&gt;dict&lt;/span&gt;((x&lt;span style=&#34;color:#333&#34;&gt;.&lt;/span&gt;name, x&lt;span style=&#34;color:#333&#34;&gt;.&lt;/span&gt;obj) &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; mgr)

    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;enforce_metric&lt;/span&gt;(self, rule):
        enforce(rule, json&lt;span style=&#34;color:#333&#34;&gt;.&lt;/span&gt;to_primitive(self&lt;span style=&#34;color:#333&#34;&gt;.&lt;/span&gt;metric))

    &lt;span style=&#34;color:#555;font-weight:bold&#34;&gt;@pecan.expose&lt;/span&gt;(&lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#39;json&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#06b;font-weight:bold&#34;&gt;get_all&lt;/span&gt;(self):
        self&lt;span style=&#34;color:#333&#34;&gt;.&lt;/span&gt;enforce_metric(&lt;span style=&#34;background-color:#fff0f0&#34;&gt;&amp;#34;get metric&amp;#34;&lt;/span&gt;)
        &lt;span style=&#34;color:#080;font-weight:bold&#34;&gt;return&lt;/span&gt; self&lt;span style=&#34;color:#333&#34;&gt;.&lt;/span&gt;metric&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;From the &lt;a href=&#34;http://pecan.readthedocs.io/en/latest/routing.html&#34;&gt;Pecan documentation&lt;/a&gt;, we can learn that Pecan uses a routing strategy known as object-dispatch to map an HTTP request to a controller, and then the method to call. Object-dispatch begins by splitting the path into a list of components and then walking an object path, starting at the root controller.&lt;/p&gt;

&lt;p&gt;We can tell Pecan which methods in a class are publically-visible via &lt;code&gt;expose()&lt;/code&gt;. If a method is not decorated with &lt;code&gt;expose()&lt;/code&gt;, Pecan will never route a request to it. In the example above, the &lt;code&gt;get_all()&lt;/code&gt; method is exposed to Pecan. Additionally, it makes use of Pecan&amp;rsquo;s built-in support for a special JSON renderer, which translates template namespaces into rendered JSON text. Meaning that the returned content will be rendered as JSON.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Understanding Ceilometer Publishers</title>
      <link>https://aalvarez.me/posts/understanding-ceilometer-publishers/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://aalvarez.me/posts/understanding-ceilometer-publishers/</guid>
      <description>&lt;p&gt;Continuing with my study of the Ceilometer pipeline, this post now covers Ceilometer &lt;strong&gt;publishers&lt;/strong&gt;. Publishers are components that make it possible to save the data into a persistent storage through the message bus, or to send it to one or more external consumers.&lt;/p&gt;

&lt;p&gt;Publishers are specified in the &lt;code&gt;publishers&lt;/code&gt; section for each pipeline that is defined in the &lt;code&gt;pipeline.yaml&lt;/code&gt; and the &lt;code&gt;event_pipeline.yaml&lt;/code&gt; files.&lt;/p&gt;

&lt;p&gt;Many different publishers are available. The following are the most common and important publishers:&lt;/p&gt;

&lt;h3 id=&#34;gnocchi&#34;&gt;Gnocchi&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;http://gnocchi.xyz/_images/gnocchi-logo.jpg&#34; alt=&#34;Gnocchi Logo&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Gnocchi is a multi-tenant timeseries, metrics and resources database. It provides an HTTP REST interface to create and manipulate the data. It is designed to store metrics at a very large scale while providing access to metrics and resources information and history.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>